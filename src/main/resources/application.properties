spring.application.name=spring-boot-microservices-resilience-patterns
app.upstream.url=http://localhost:9000

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

resilience4j.circuitbreaker.instances.downstream.register-health-indicator=true
resilience4j.circuitbreaker.instances.downstream.event-consumer-buffer-size=10

resilience4j.circuitbreaker.instances.downstream.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.downstream.wait-duration-in-open-state=15s
resilience4j.circuitbreaker.instances.downstream.permitted-number-of-calls-in-half-open-state=2

#   On sliding window based on count:
#   This strategy sets a maximum number of failures.
#   Once this threshold is reached, the circuit breaker moves to Open.
#   Note that every time a request succeeds,
#   the counter is set back to zero; the circuit breaker only
#   moves to Open when the maximum number of failures happen consecutively.

#   based on time
#   This strategy counts the number of failures within a given time window.
#   Unlike the Count approach, the circuit breaker will only move to Open
#   if the number of failing requests tracked within the given period
#   exceeds the threshold. As the time window slides, the failures out
#   of the window limits are ignored.

resilience4j.circuitbreaker.instances.downstream.sliding-window-size=10
resilience4j.circuitbreaker.instances.downstream.sliding-window-type=count_based

#   This specifies the minimum number of calls required within the sliding window
#   before the circuit breaker can calculate the success or failure rate.
resilience4j.circuitbreaker.instances.downstream.minimum-number-of-calls=2

#   This sets the failure rate threshold in percentage. If the failure rate exceeds
#   this threshold within the sliding window, the circuit breaker transitions
#   to the open state.
resilience4j.circuitbreaker.instances.downstream.failure-rate-threshold=2
