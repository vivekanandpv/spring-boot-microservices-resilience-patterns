spring.application.name=spring-boot-microservices-resilience-patterns
app.upstream.url=http://localhost:9000

server.port=9001

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

resilience4j.circuitbreaker.instances.downstream.register-health-indicator=true
resilience4j.circuitbreaker.instances.downstream.event-consumer-buffer-size=10

resilience4j.circuitbreaker.instances.downstream.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.downstream.wait-duration-in-open-state=15s
resilience4j.circuitbreaker.instances.downstream.permitted-number-of-calls-in-half-open-state=2

#   On sliding window based on count:
#   This strategy sets a maximum number of failures.
#   Once this threshold is reached, the circuit breaker moves to Open.
#   Note that every time a request succeeds,
#   the counter is set back to zero; the circuit breaker only
#   moves to Open when the maximum number of failures happen consecutively.

#   based on time
#   This strategy counts the number of failures within a given time window.
#   Unlike the Count approach, the circuit breaker will only move to Open
#   if the number of failing requests tracked within the given period
#   exceeds the threshold. As the time window slides, the failures out
#   of the window limits are ignored.

resilience4j.circuitbreaker.instances.downstream.sliding-window-size=10
resilience4j.circuitbreaker.instances.downstream.sliding-window-type=count_based

#   minimum number of calls which are required (per sliding window period) before
#   the CircuitBreaker can calculate the error rate or slow call rate.
#   For example, if minimumNumberOfCalls is 10, then at least 10 calls must be
#   recorded, before the failure rate can be calculated.
#   If only 9 calls have been recorded the CircuitBreaker will not transition
#   to open even if all 9 calls have failed.
resilience4j.circuitbreaker.instances.downstream.minimum-number-of-calls=2

#   This sets the failure rate threshold in percentage. If the failure rate exceeds
#   this threshold within the sliding window, the circuit breaker transitions
#   to the open state.

#   Our Case: Consider minimum 2 calls in the window of 10 calls
#   then apply 50% failure threshold. This means when I make minimum 2 calls,
#   and at least 1 fails, the transition happens

#   minimum-number-of-calls alone will work
#   but failure-rate-threshold alone won't! If I set the rate to 10 without the
#   minimum number of calls, the transition happens after exhausting all the 10
#   calls in the window!

#   failure-rate-threshold percentage of minimum-number-of-calls
#   default is 50%
resilience4j.circuitbreaker.instances.downstream.failure-rate-threshold=50
